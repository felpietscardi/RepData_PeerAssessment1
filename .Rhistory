summary(assumedData)
activity_rm <- read.csv(file = "activity.csv")
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
act_new <- activity
act_new[which(is.na(act_new$steps)),1] <- dailyact[as.character(act_new[which(is.na(act_new$steps)),3])]
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
act_new <- activity
act_new[which(is.na(act_new$steps)),1] <- dailyact[as.character(act_new[which(is.na(act_new$steps)),3])]
sum(is.na(act_new))
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(act_new))
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(activity_rm))
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
sum(is.na(dailyact))
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(activity_rm))
sum(is.na(activity))
dailyact
str(dailyact)
which(is.na(act_new$steps))
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(activity))
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
sum(is.na(dailyact))
act_new <- activity
act_new[which(is.na(act_new$steps)),1] <- dailyact[as.character(act_new[which(is.na(act_new$steps)),3])]
sum(is.na(act_new))
which(is.na(act_new$steps))
which(is.na(act_new$steps))
act_new[which(is.na(act_new$steps)),3]
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(activity))
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
sum(is.na(dailyact))
act_new <- activity
which(is.na(act_new$steps))
act_new[which(is.na(act_new$steps)),1]
act_new[which(is.na(act_new$steps)),3]
dailyact[as.character(act_new[which(is.na(act_new$steps)),3])]
.libPaths()
library(dplyr)
install.packages(dplyr)
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
library(dplyr)
library(ggplot2)
activityData <- tbl_df(read.csv(file = "activity.csv"))
# 1. Make a histogram of the total number of steps taken each day
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps)
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
activityData %>% na.omit() %>% group_by(date) %>% summarise(mean(steps), median(steps))
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
intervalAvg <- activityData %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset.
# The strategy does not need to be sophisticated. For example, you could use the mean/median for that day,
#or the mean for that 5-minute interval, etc.
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(activity))
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
sum(is.na(dailyact))
act_new <- activity
act_new[which(is.na(act_new$steps)),1] <- dailyact[as.character(act_new[which(is.na(act_new$steps)),3])]
sum(is.na(act_new))
assumedData <- activityData
idx <- which(is.na(assumedData))
assumedData$steps <- impute.knn(activityData)$steps
assumedData[idx, 1] <- intervalAvg[intervalAvg$interval == assumedData[idx, 3], 2]
assumedData[which(is.na(assumedData$steps)), 1] <- intervalAvg[as.character(assumedData[which(is.na(assumedData$steps)), 2])]
newValue <- intervalAvg[which(is.na(assumedData$steps)), 2]
assumedData[which(is.na(assumedData$steps)), 1] <- newValue
assumedData[which(is.na(assumedData)), 1] <- intervalAvg[which(is.na(assumedData)), 2]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates
# from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
# For this part the `weekdays()` function may be of some help here. Use
# the dataset with the filled-in missing values for this part.
# 1. Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
# 1. Make a panel plot containing a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using **simulated data**:
# ![Sample panel plot](instructions_fig/sample_panelplot.png)
# **Your plot will look different from the one above** because you will
# be using the activity monitor data. Note that the above plot was made
# using the lattice system but you can make the same version of the plot
# using any plotting system you choose.
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
library(dplyr)
library(ggplot2)
activityData <- tbl_df(read.csv(file = "activity.csv"))
# 1. Make a histogram of the total number of steps taken each day
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps)
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
activityData %>% na.omit() %>% group_by(date) %>% summarise(mean(steps), median(steps))
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
intervalAvg <- activityData %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
install.packages("dplyr")
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
library(dplyr)
library(ggplot2)
activityData <- tbl_df(read.csv(file = "activity.csv"))
# 1. Make a histogram of the total number of steps taken each day
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps)
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
activityData %>% na.omit() %>% group_by(date) %>% summarise(mean(steps), median(steps))
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
intervalAvg <- activityData %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalAvg[which.max(intervalAvg$avg), ]
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
assumedData <- activityData
assumedData
idx <- which(is.na(assumedData))
idx
intervalAvg[which(is.na(assumedData)), 2]
assumedData[which(is.na(assumedData)), 1] <- intervalAvg[[which(is.na(assumedData)), 2]]
intervalAvg[which(is.na(assumedData)), 2]
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
sum(is.na(activity))
dailyact<-tapply(activity_rm$steps, activity_rm$interval, mean)
sum(is.na(dailyact))
act_new <- activity
which(is.na(act_new$steps)),1
which(is.na(act_new$steps))
act_new[which(is.na(act_new$steps)),1]
assumedData[which(is.na(assumedData)), 1]
intervalAvg[which(is.na(assumedData)), 2]
assumedData[which(is.na(assumedData)), 1] <- intervalAvg[which(is.na(assumedData)), 2]
count(assumedData[is.na(assumedData), ])
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
library(dplyr)
library(ggplot2)
activityData <- read.csv(file = "activity.csv")
# 1. Make a histogram of the total number of steps taken each day
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps)
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
activityData %>% na.omit() %>% group_by(date) %>% summarise(mean(steps), median(steps))
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
intervalAvg <- activityData %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalAvg[which.max(intervalAvg$avg), ]
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset.
# The strategy does not need to be sophisticated. For example, you could use the mean/median for that day,
#or the mean for that 5-minute interval, etc.
assumedData <- activityData
assumedData[which(is.na(assumedData)), 1]
intervalAvg[which(is.na(assumedData)), 2]
assumedData[which(is.na(assumedData)), 1] <- intervalAvg[which(is.na(assumedData)), 2]
count(assumedData[is.na(assumedData), ])
activity <- read.csv(file = "activity.csv")
activity_rm<-activity[which(!is.na(activity$steps)),]
activity_rm
activity[which(!is.na(activity$steps)),]
which(!is.na(activity$steps))
intervalAvg
assumedData[which(is.na(assumedData$steps)), 1]
activityDataOmit <- activityData %>% na.omit()
intervalAvg <- activityDataOmit %>% group_by(interval) %>% summarise(avg = mean(steps))
intervalAvg
intervalAvg[which.max(intervalAvg$avg), ]
intervalAvg[as.character(act_new[which(is.na(act_new$steps)),3])]
intervalAvg[as.character(assumedData[which(is.na(assumedData$steps)),3])]
assumedData[which(is.na(assumedData$steps)),3])
assumedData[which(is.na(assumedData$steps)),3]
intervalAvg[as.character(assumedData[which(is.na(assumedData$steps)),3])]
dailyact[as.character(act_new[which(is.na(act_new$steps)),3])]
act_new[which(is.na(act_new$steps)
act_new[which(is.na(act_new$steps)),3]
act_new[which(is.na(act_new$steps)),3])
act_new[which(is.na(act_new$steps)),3]
dailyact
intervalAvg
dim(dailyact)
str(dim)
str(dailyact)
list(intervalAvg)
as.list(intervalAvg)
str(dailyact)
as.numeric(dailyact)
as.numeric(intervalAvg)
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
library(dplyr)
library(ggplot2)
activityData <- read.csv(file = "activity.csv")
# 1. Make a histogram of the total number of steps taken each day
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps)
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
activityData %>% na.omit() %>% group_by(date) %>% summarise(mean(steps), median(steps))
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
activityDataOmit <- activityData %>% na.omit()
intervalAvg <- activityDataOmit %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalAvg[which.max(intervalAvg$avg), ]
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
activity_rm <- activity[which(!is.na(activity$steps)),]
dailyact <- tapply(activity_rm$steps, activity_rm$interval, mean)
assumedData[which(is.na(assumedData$steps)), 1] <-
dailyact[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
count(assumedData[is.na(assumedData), ])
assumedData <- activityData
# calculate the avg step
activityRemoved <- activityData[which(!is.na(activityData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <-
dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
library(dplyr)
library(ggplot2)
activityData <- read.csv(file = "activity.csv")
# 1. Make a histogram of the total number of steps taken each day
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps)
# 2. Calculate and report the **mean** and **median** total number of steps taken per day
activityData %>% na.omit() %>% group_by(date) %>% summarise(mean(steps), median(steps))
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
activityDataOmit <- activityData %>% na.omit()
intervalAvg <- activityDataOmit %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalAvg[which.max(intervalAvg$avg), ]
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset.
# The strategy does not need to be sophisticated. For example, you could use the mean/median for that day,
#or the mean for that 5-minute interval, etc.
assumedData <- activityData
# calculate the avg step
activityRemoved <- activityData[which(!is.na(activityData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <-
dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates
# from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
# For this part the `weekdays()` function may be of some help here. Use
# the dataset with the filled-in missing values for this part.
# 1. Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
# 1. Make a panel plot containing a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using **simulated data**:
# ![Sample panel plot](instructions_fig/sample_panelplot.png)
# **Your plot will look different from the one above** because you will
# be using the activity monitor data. Note that the above plot was made
# using the lattice system but you can make the same version of the plot
# using any plotting system you choose.
stepSummary
stepsByDayAssumed <- tapply(assumedData$steps, assumedData$date, sum)
mean(stepsByDayAssumed)
median(stepsByDayAssumed)
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
intervalAvg <- activityData %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalAvg[which.max(intervalAvg$avg), ]
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
assumedData <- activityData
# calculate the avg step
activityRemoved <- assumedData[which(!is.na(assumedData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <- dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
stepsByDayAssumed <- tapply(assumedData$steps, assumedData$date, sum)
qplot(stepsByDayAssumed)
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
mean(stepsByDayAssumed)
median(stepsByDayAssumed)
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
assumedData <- activityData
# calculate the avg step
activityRemoved <- assumedData[which(!is.na(assumedData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <- dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
stepsByDayAssumed <- tapply(assumedData$steps, assumedData$date, sum)
qplot(stepsByDayAssumed)
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
mean(stepsByDayAssumed)
median(stepsByDayAssumed)
# Chunk 1: setOptions
# Chunk 2
# load all the required libraries
library(dplyr)
library(ggplot2)
# Chunk 3
# 1. Load the data (i.e. `read.csv()`)
fileUrl         <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
dowloadedFile   <- "repdata_data_activity.zip"
if (!file.exists(dowloadedFile)) {
download.file(url = fileUrl, destfile = dowloadedFile)
unzip(dowloadedFile)
}
# 2. Process/transform the data (if necessary) into a format suitable for your analysis
activityData <- tbl_df(read.csv(file = "activity.csv"))
head(activityData)
# Chunk 4
stepSummary <- activityData %>% na.omit() %>% group_by(date) %>% summarise(steps = sum(steps))
qplot(stepSummary$steps, main = "Total Number of Steps Taken Each Day")
# Chunk 5
mean(stepSummary$steps)
median(stepSummary$steps)
# Chunk 6
# 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
intervalAvg <- activityData %>% na.omit() %>% group_by(interval) %>% summarise(avg = mean(steps))
ggplot(data=intervalAvg, aes(x=interval, y=avg)) +
geom_line() +
xlab("5-Minute Interval") +
ylab("Average number of steps taken") +
ggtitle("Average Number of Steps Taken Over All Days")
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalAvg[which.max(intervalAvg$avg), ]
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
assumedData <- activityData
# calculate the avg step
activityRemoved <- assumedData[which(!is.na(assumedData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <- dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
stepsByDayAssumed <- tapply(assumedData$steps, assumedData$date, sum)
qplot(stepsByDayAssumed)
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
mean(stepsByDayAssumed)
median(stepsByDayAssumed)
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
assumedData <- activityData
# calculate the avg step
activityRemoved <- activityData[which(!is.na(activityData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <-
dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
stepsByDayAssumed <- tapply(assumedData$steps, assumedData$date, sum)
qplot(stepsByDayAssumed)
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
mean(stepsByDayAssumed)
median(stepsByDayAssumed)
# Note that there are a number of days/intervals where there are missing
# values (coded as `NA`). The presence of missing days may introduce
# bias into some calculations or summaries of the data.
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
count(activityData[is.na(activityData), ])
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
assumedData <- activityData
# calculate the avg step
activityRemoved <- activityData[which(!is.na(activityData$steps)),]
dailyActivity <- tapply(activityRemoved$steps, activityRemoved$interval, mean)
# replace the value
assumedData[which(is.na(assumedData$steps)), 1] <-
dailyActivity[as.character(assumedData[which(is.na(assumedData$steps)),3])]
count(assumedData[is.na(assumedData), ])
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
stepsByDayAssumed <- tapply(assumedData$steps, assumedData$date, sum)
qplot(stepsByDayAssumed)
# 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
mean(stepsByDayAssumed)
median(stepsByDayAssumed)
